/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormularioDatosExactos.java
 *
 * Created on 28/10/2012, 05:04:13 PM
 */
package flujocaja;

import Clases.Gasto;
import Clases.Intereses;
import controlador.Escenario;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP G42
 */
public class FormularioDatosExactos extends javax.swing.JDialog {

    private Escenario escenarioNormal;
    /** Creates new form FormularioDatosExactos */
    public FormularioDatosExactos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void mostrarDatosExactos(Escenario e){
        this.escenarioNormal = e;
        this.escribirDatos();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatosExactos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaDatosExactos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaDatosExactos.setName("tablaDatosExactos"); // NOI18N
        jScrollPane1.setViewportView(tablaDatosExactos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioDatosExactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioDatosExactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioDatosExactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioDatosExactos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FormularioDatosExactos dialog = new FormularioDatosExactos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaDatosExactos;
    // End of variables declaration//GEN-END:variables

    private void escribirDatos(){
        double [] iterador;
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Concepto");
        modelo.addColumn("Factura");
        for (int i=0; i<this.escenarioNormal.getListaAnios().length; i++){
            modelo.addColumn(this.escenarioNormal.getListaAnios()[i]);
        }
        this.tablaDatosExactos.setModel(modelo);
        
        //ingresos
        if (this.escenarioNormal.ingresosCalculados())
            this.insertarFilaTablaDatosExactos("Ingresos", this.escenarioNormal.ingresosActuales());

        //costos
        if (this.escenarioNormal.costosCalculados())
            this.insertarFilaTablaDatosExactos("Costos", this.escenarioNormal.getModeloCostos().getFactura(), this.escenarioNormal.costosActuales());

        //uitlidad bruta
        if (this.escenarioNormal.utilidadBrutaCalculada())
            this.insertarFilaTablaDatosExactos("Utilidad bruta", this.escenarioNormal.getUtilidadBruta());

        //gastos
        ArrayList<Gasto> listaGastos = this.escenarioNormal.getListaGastos();
        if (listaGastos!=null){
            for(Gasto g : listaGastos){
                iterador = g.getListaGastos();
                if (iterador!=null)
                    this.insertarFilaTablaDatosExactos(g.getNombreGasto(), g.getFactura(), iterador);
            }
        }
        //intereses
        ArrayList<Intereses> listaIntereses = this.escenarioNormal.getListaIntereses();
        if (listaIntereses!=null){
            for (Intereses i:listaIntereses){
                iterador = i.getListaCuotasAnuales();
                if (iterador!=null)
                    this.insertarFilaTablaDatosExactos("Intereses", false, i.getListaCuotasAnuales());
            }
        }
        //"UAI"
        if (this.escenarioNormal.uaiCalculado())
            this.insertarFilaTablaDatosExactos("UAI", this.escenarioNormal.getUtilidadAntesImpuestos());
        
        //"IVA por pagar"
        if (this.escenarioNormal.ivaCalculado()){
            this.insertarFilaTablaDatosExactos("IVA por pagar", this.escenarioNormal.IVAporPagar());
        }            
        
        // ISR
        if (this.escenarioNormal.isrCalculado()){
            iterador = this.escenarioNormal.ISRporPagarTemporal();
            if (iterador!=null)
                this.insertarFilaTablaDatosExactos("ISR temporal", iterador);
            
        }
        //ISO
        if (this.escenarioNormal.ISOcalculado()){
            iterador = this.escenarioNormal.ISOporPagar();
            if (iterador!=null){
                this.insertarFilaTablaDatosExactos("ISR por pagar", this.escenarioNormal.ISRporPagar());
                this.insertarFilaTablaDatosExactos("ISO", iterador);
                
            }
        }
        //UTILIDAD NETA
        if (this.escenarioNormal.getUtilidadNeta()!=null)
            this.insertarFilaTablaDatosExactos("Utilidad neta", this.escenarioNormal.getUtilidadNeta());
        //FEN
        if (this.escenarioNormal.getFEN()!=null)
            this.insertarFilaTablaDatosExactos("FEN", this.escenarioNormal.getFEN());
        //TMAR
        this.insertarFilaTablaDatosExactos("TMAR",this.escenarioNormal.getTMARFormateada());
        //VAN
        if (this.escenarioNormal.getVAN()!=null){
            this.insertarFilaTablaDatosExactos("VAN", this.escenarioNormal.getVAN());
        }
    }
    
    private void insertarFilaTablaDatosExactos(String nombre,boolean factura,double [] valores){
        Object [] fila = new Object[valores.length+2];
        fila[0] = nombre;
        if (factura)
            fila[1] = "S";
        else
            fila[1] = "N";
        //System.arraycopy(valores, 0, fila, 1, valores.length);
        for (int i=0; i<valores.length; i++){
            fila[i+2] = valores[i];
        }
        DefaultTableModel modelo = (DefaultTableModel) this.tablaDatosExactos.getModel();
        modelo.addRow(fila);
    }

    private void insertarFilaTablaDatosExactos(String nombre,double [] valores){
        Object [] fila = new Object[valores.length+2];
        fila[0] = nombre;
        fila[1] = null;
        //System.arraycopy(valores, 0, fila, 1, valores.length);
        for (int i=0; i<valores.length; i++){
            fila[i+2] = valores[i];
        }
        DefaultTableModel modelo = (DefaultTableModel) this.tablaDatosExactos.getModel();
        modelo.addRow(fila);
    }
    
    private void insertarFilaTablaDatosExactos(String nombre,String valor){
        DefaultTableModel modelo = (DefaultTableModel) this.tablaDatosExactos.getModel();
        Object [] fila = new Object[this.tablaDatosExactos.getColumnCount()+2];
        fila[0] = nombre;
        fila[1] = null;
        //System.arraycopy(valores, 0, fila, 1, valores.length);
        for (int i=2; i<fila.length; i++){
            fila[i] = valor;
        }
        
        modelo.addRow(fila);
    }
    
//    private void insertarInteresTablaDatosExactos(String nombre,boolean val,double [] valores){
//        Object [] fila = new Object[valores.length+2];
//        fila[0] = "Intereses";
//        fila[1] = val;
//        //System.arraycopy(valores, 0, fila, 1, valores.length);
//        for (int i=0; i<valores.length; i++){
//            fila[i+2] = valores[i];
//        }
//        DefaultTableModel modelo = (DefaultTableModel) this.tablaDatosExactos.getModel();
//        modelo.addRow(fila);
//    }
    
}
